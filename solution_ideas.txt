GENERAL:
 - Try binary/ternary searching the answer.
 - You can try to map anything to graphs. Intersection of things, grouping of stuff, etc. Geometry to graphs is specially useful. Another
useful thing to approach as a graph is constraints between pairs of things ('a' iff not 'b') and then throw a bicolorability dfs.
 - If you are asked to find the optimal solution for something under some conditions, try to do it without even caring for those
conditions and only then try to fit them in. Maybe those conditions didn't affect the achievability of that optimal result?

GRAPHS:
 - Amount of paths of length 'k' can be calculated by raising the adjacency matrix to the kth power.
 - Amount of paths of length 'k' on a tree can be done with Centroid Decomposition.

GREEDY:
 - Several greedy "grabbing" problems can be done with a priority queue. Keep grabbing or swap current with the worst
 you have already grabbed.
 
DP:
 - Try sorting something before doing the recursion.
 - Stablish the opposite order DP (instead of minimum time to grab n objects, maximum objects grabbable with t time).

STRINGS:
 - Anything related with string lexicographic order can probably be done with a Suffix Array. If it has comparison
 between two strings, you can even consider building a suffix array from the concatenation of the two strings.

MATH:
 - If you have to solve an equation, you will very probably have to brute force the variables. Try to find if any
 variable divides another (so you brute force only through the divisors of the other)

//_________________________ USEFUL RANDOM NOTES _________________________//
MATH:
-> Soma dos termos de PG finita:   S = a1 * (q^n-1) / (q-1)
-> Soma dos termos de PG infinita: S = a1 / (1-q)
-> ax + by + c tem solução iff gcd(a, b) | c
-> VECTOR W/ TRIANGLE SIDES: Suppose you have a vector where all the numbers are distinct from each other. The length it must have to ensure you can make at least a triangle out of its numbers is 45, because the triangle inequality grows just as fast as fibonacci (and 45th fib is 1e9). Then, making 2 triangles is 48, and so on.
-> The difference of the coordinates i,j of a matrix is the same through its main direction diagonals (aka, i-j is the same for
everyone on the main diagonal and on the parallel diagonals to the main). The sum i+j is the same to the secondary diagonals.
-> Do everything relative to probability by counting (favorable) / (total cases). Don't even try doing it the 'regular' way.
-> To count the amount of triangles with sides a, b, c such that a <= b <= c you can do the following: consider a, b and c as piles. Then,
consider count(n, k) to be the function that returns the amount of ways you can fill the last k piles using at most n stones. Then, simply
call count(n, 3).
-> Log base conversion: log_a(b) = (loc_c(b) / log_c(a)) = (log2(b) / log2(a))
-> LINEAR RECURRENCES: Suppose you have a linear recurrence
f(n) = c1f(n-1) + c2f(n-2) + ... + ckf(n-k)
You want to find a square matrix X such that
X * [f(n) f(n+1) ... f(n+k-1)] = [f(n+1) f(n+2) ... f(n+k)]
And that matrix is the following k*k matrix:
[0, 1, 0, 0, 0, ... 0],
[0, 0, 1, 0, 0, ... 0],
[0, 0, 0, 1, 0, ... 0],
...
[0, 0, 0, 0, 0, ... 1],
[c_k, c_(k-1), c_(k-2), ... , c1]

STRINGS:
-> "$" evaluates less than any letter. "~" evaluates larger than any letter.
-> Substring search with Suffix Array: build the SA of the text (tlogt) and then binary search the pattern 'p' on it (remembering that the pattern is necessarily a prefix of a suffix of t). Each query then takes plogt time. Finding all repetitions can be done with a lower bound and upper bound binary search.

GEOMETRY:
A triangle ABC with sides a, b and c (a is opposite to A, b is opposite to B, c is opposite to C)
COSINE LAW:
a² = b² + c² -2bc cos(A)
b² = a² + c² -2ac cos(B)
c² = a² + b² -2ab cos(C)
SINE LAW:
sinA/a = sinB/b = sinC/c
